.. _topics-module:

创建应用程序
=============================

概述
-----------------------------
基于CNStream创建应用程序实际是基于各个模块（自有模块和用户自定义模块）搭建业务流水线，用户可以选择使用JSON配置文件方式或非配置文件方式创建应用程序（通常建议前者）。     

:: 

1. 配置文件方式
^^^^^^^^^^^^^^^^^^^^

配置文件方式下，用户开发应用时需要关注两部分：JSON文件编写和启动Pipeline的基本骨架构建。    

JSON配置文件介绍
********
JSON配置文件主要用于声明Pipeline中各个模块的上下游关系，及其每个模块内部的参数配置。   

一个典型的配置文件示例： 
::

  {
  "source" : {     
   /* 
    数据源模块，设置使用ffmpeg进行demux，使用mlu进行decode，不单独起线程 
   */
    "class_name" : "cnstream::DataSource",
    "parallelism" : 0,
    "next_modules" : ["detector"],
    "custom_params" : {
      "source_type" : "ffmpeg",
      "output_type" : "mlu",
      "decoder_type" : "mlu",
      "device_id" : 0
    }
  },

  "detector" : {  
  /* 
    Inferencermo模块，设置使用resnet34ssd离线模型，使用PostprocSsd进行网络输出数据后处理,
      并行度为4，模块输入队列的max_size为20
  */
    "class_name" : "cnstream::Inferencer",
    "parallelism" : 4,
    "max_input_queue_size" : 20,
    "next_modules" : ["tracker"],
    "custom_params" : {
      "model_path" : "../data/models/MLU100/Primary_Detector/resnet34ssd/resnet34_ssd.cambricon",
      "func_name" : "subnet0",
      "postproc_name" : "PostprocSsd",
      "device_id" : 0
    }
  },

  "tracker" : {   
  /* 
    Tracker模块，设置使用track离线模型，设置并行度为4，模块输入队列的max_size为20
  */
    "class_name" : "cnstream::Tracker",
    "parallelism" : 4,
    "max_input_queue_size" : 20,
    "next_modules" : ["osd"],
    "custom_params" : {
      "model_path" : "../data/models/MLU100/Track/track.cambricon",
      "func_name" : "subnet0"
    }
  },

  "osd" : {
  /* 
    Osd模块，配置解析lable路径，设置并行度为4，模块输入队列的max_size为20
  */
    "class_name" : "cnstream::Osd",
    "parallelism" : 4,
    "max_input_queue_size" : 20,
    "next_modules" : ["encoder"],
    "custom_params" : {
      "chinese_label_flag" : "false", 
      "label_path" : "../data/models/MLU100/Primary_Detector/resnet34ssd/label_voc.txt"
    }
  },

  "encoder" : {
  /* 
    Encoder模块，配置输出视频的dump路径，设置并行度为4，模块输入队列的max_size为20
  */
    "class_name" : "cnstream::Encoder",
    "parallelism" : 4,
    "max_input_queue_size" : 20,
    "next_modules" : ["fps_stats"],
    "custom_params" : {
      "dump_dir" : "output"
    }
  },

  "fps_stats" : {  
  /* 
    FpsStats模块，设置并行度为4，模块输入队列的max_size为20
  */
    "class_name" : "cnstream::FpsStats",
    "parallelism" : 2,
    "max_input_queue_size" : 20
  }
}


上述JSON配置文件使用cnstream提供的自有模块DataSource、Inferencer、Tracker、Osd、Encoder，及其ssd和track离线模型，实现了典型的“视频源解析&解码 -> 物体检测 -> 追踪 -> 在视频帧上叠加绘制物体检测信息框 -> 编码输出视频”的Pipeline，并在Pipeline中加入了fps统计模块统计Pipeline整体性能。  

用户可以参考这个JSON构建自己的配置文件。另外，CNStream提供了cnstream_inspect工具查询每个模块支持的自定义参数以及检查JSON配置文件的正确性，用法详见cnstream_inspect介绍。

Pipeline基本骨架构建
********
CNStream是基于Pipeline和EventBus进行设计，构建Pipeline核心骨架包括：搭建整体业务流水线和设置Event处理。    

在JSON配置文件方式下，搭建整体的业务流水线实际是从预准备的JSON文件中获取Pipeline结构、module上下游关系和各个module的参数，初始化各个任务执行环节(即模块)。另外，用户可以通过设置事件监听获取Pipeline处理状态，添加对应的状态处理机制，如eos处理、error处理等。
   
整个过程大致包括下面几个步骤：

::

  - 创建Pipeline对象  
  - 使用预准备的JSON配置文件构建Pipeline(pipeline.BuildPipelineByJSONFile)
  - 设置事件监听处理机制(pipeline.SetStreamMsgObserver)   
  - 启动Pipeline(pipeline.Start())  
  - 动态添加/删除视频/图片源(pipeline.AddVideoSource()/RemoveSource())   

这部分的具体源代码示例可参考CNStream源码中samples/demo.cpp。      

2. 非配置文件方式  
^^^^^^^^^^^^^^^^^^^^

配置文件方式与非配置文件方式的区别主要在于：前者使用JSON声明Pipeline结构、模块上下游关系和模块参数等，而后者则需要开发者自己创建模块对象，设置模块参数、设置模块上下游关系等。     

相对而言，配置文件方式更加灵活，开发者编写Pipeline基本骨架之后，可以支持多种JSON配置，可以灵活地调整配置文件中的模块参数甚至结构等，而无需重新编译。   
同时，这也是我们推荐的使用方式。非配置文件方式的编写方式在此不做详述，对非配置文件方式更感兴趣的用户，可以阅读参考CNStream源代码中samples/example中的实现。  


App开发示例
-----------------------------
上述内容主要描述了开发者应该如何使用CNStream创建自己的应用。实际上，CNStream也提供了一些完整、独立的应用程序开发示例（参见CNStream源代码中apps目录）。